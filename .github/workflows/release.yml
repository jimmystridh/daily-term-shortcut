name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds (using musl for static linking)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: daily-term-shortcut
            asset_name: daily-term-shortcut-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: daily-term-shortcut
            asset_name: daily-term-shortcut-linux-arm64
          
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: daily-term-shortcut.exe
            asset_name: daily-term-shortcut-windows-amd64.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: daily-term-shortcut.exe
            asset_name: daily-term-shortcut-windows-arm64.exe
          
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: daily-term-shortcut
            asset_name: daily-term-shortcut-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: daily-term-shortcut
            asset_name: daily-term-shortcut-macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Install musl tools for Linux static builds
      - name: Install musl tools
        if: contains(matrix.target, 'linux-musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          
      # Install cross-compilation tools for ARM64
      - name: Install ARM64 dependencies
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu musl-tools
          
      - name: Build
        run: |
          if [[ "${{ matrix.target }}" == *"-linux-musl" ]]; then
            rustup target add ${{ matrix.target }}
          fi
          cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc
          # Force static linking for Linux builds
          RUSTFLAGS: '-C target-feature=+crt-static'

      - name: Prepare binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          else
            tar -czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}.*

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            **/daily-term-shortcut-*-amd64.zip
            **/daily-term-shortcut-*-amd64.tar.gz
            **/daily-term-shortcut-*-arm64.zip
            **/daily-term-shortcut-*-arm64.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 